// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/KaranJayakumar/remember/ent/connection"
	"github.com/KaranJayakumar/remember/ent/note"
	"github.com/KaranJayakumar/remember/ent/tag"
	"github.com/KaranJayakumar/remember/ent/workspace"
	"github.com/google/uuid"
)

// ConnectionCreate is the builder for creating a Connection entity.
type ConnectionCreate struct {
	config
	mutation *ConnectionMutation
	hooks    []Hook
}

// SetWorkspaceID sets the "workspace_id" field.
func (cc *ConnectionCreate) SetWorkspaceID(u uuid.UUID) *ConnectionCreate {
	cc.mutation.SetWorkspaceID(u)
	return cc
}

// SetName sets the "name" field.
func (cc *ConnectionCreate) SetName(s string) *ConnectionCreate {
	cc.mutation.SetName(s)
	return cc
}

// SetImageURL sets the "image_url" field.
func (cc *ConnectionCreate) SetImageURL(s string) *ConnectionCreate {
	cc.mutation.SetImageURL(s)
	return cc
}

// SetNillableImageURL sets the "image_url" field if the given value is not nil.
func (cc *ConnectionCreate) SetNillableImageURL(s *string) *ConnectionCreate {
	if s != nil {
		cc.SetImageURL(*s)
	}
	return cc
}

// SetID sets the "id" field.
func (cc *ConnectionCreate) SetID(u uuid.UUID) *ConnectionCreate {
	cc.mutation.SetID(u)
	return cc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (cc *ConnectionCreate) SetNillableID(u *uuid.UUID) *ConnectionCreate {
	if u != nil {
		cc.SetID(*u)
	}
	return cc
}

// SetWorkspace sets the "workspace" edge to the Workspace entity.
func (cc *ConnectionCreate) SetWorkspace(w *Workspace) *ConnectionCreate {
	return cc.SetWorkspaceID(w.ID)
}

// AddNoteIDs adds the "notes" edge to the Note entity by IDs.
func (cc *ConnectionCreate) AddNoteIDs(ids ...int) *ConnectionCreate {
	cc.mutation.AddNoteIDs(ids...)
	return cc
}

// AddNotes adds the "notes" edges to the Note entity.
func (cc *ConnectionCreate) AddNotes(n ...*Note) *ConnectionCreate {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return cc.AddNoteIDs(ids...)
}

// AddTagIDs adds the "tags" edge to the Tag entity by IDs.
func (cc *ConnectionCreate) AddTagIDs(ids ...int) *ConnectionCreate {
	cc.mutation.AddTagIDs(ids...)
	return cc
}

// AddTags adds the "tags" edges to the Tag entity.
func (cc *ConnectionCreate) AddTags(t ...*Tag) *ConnectionCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return cc.AddTagIDs(ids...)
}

// Mutation returns the ConnectionMutation object of the builder.
func (cc *ConnectionCreate) Mutation() *ConnectionMutation {
	return cc.mutation
}

// Save creates the Connection in the database.
func (cc *ConnectionCreate) Save(ctx context.Context) (*Connection, error) {
	cc.defaults()
	return withHooks(ctx, cc.sqlSave, cc.mutation, cc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cc *ConnectionCreate) SaveX(ctx context.Context) *Connection {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *ConnectionCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *ConnectionCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cc *ConnectionCreate) defaults() {
	if _, ok := cc.mutation.ID(); !ok {
		v := connection.DefaultID()
		cc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cc *ConnectionCreate) check() error {
	if _, ok := cc.mutation.WorkspaceID(); !ok {
		return &ValidationError{Name: "workspace_id", err: errors.New(`ent: missing required field "Connection.workspace_id"`)}
	}
	if _, ok := cc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Connection.name"`)}
	}
	if v, ok := cc.mutation.Name(); ok {
		if err := connection.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Connection.name": %w`, err)}
		}
	}
	if len(cc.mutation.WorkspaceIDs()) == 0 {
		return &ValidationError{Name: "workspace", err: errors.New(`ent: missing required edge "Connection.workspace"`)}
	}
	return nil
}

func (cc *ConnectionCreate) sqlSave(ctx context.Context) (*Connection, error) {
	if err := cc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	cc.mutation.id = &_node.ID
	cc.mutation.done = true
	return _node, nil
}

func (cc *ConnectionCreate) createSpec() (*Connection, *sqlgraph.CreateSpec) {
	var (
		_node = &Connection{config: cc.config}
		_spec = sqlgraph.NewCreateSpec(connection.Table, sqlgraph.NewFieldSpec(connection.FieldID, field.TypeUUID))
	)
	if id, ok := cc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := cc.mutation.Name(); ok {
		_spec.SetField(connection.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := cc.mutation.ImageURL(); ok {
		_spec.SetField(connection.FieldImageURL, field.TypeString, value)
		_node.ImageURL = value
	}
	if nodes := cc.mutation.WorkspaceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   connection.WorkspaceTable,
			Columns: []string{connection.WorkspaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workspace.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.WorkspaceID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.NotesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   connection.NotesTable,
			Columns: []string{connection.NotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(note.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.TagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   connection.TagsTable,
			Columns: []string{connection.TagsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ConnectionCreateBulk is the builder for creating many Connection entities in bulk.
type ConnectionCreateBulk struct {
	config
	err      error
	builders []*ConnectionCreate
}

// Save creates the Connection entities in the database.
func (ccb *ConnectionCreateBulk) Save(ctx context.Context) ([]*Connection, error) {
	if ccb.err != nil {
		return nil, ccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Connection, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ConnectionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *ConnectionCreateBulk) SaveX(ctx context.Context) []*Connection {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *ConnectionCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *ConnectionCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}
