// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/KaranJayakumar/remember/ent/connection"
	"github.com/KaranJayakumar/remember/ent/note"
	"github.com/KaranJayakumar/remember/ent/predicate"
	"github.com/KaranJayakumar/remember/ent/tag"
	"github.com/KaranJayakumar/remember/ent/workspace"
	"github.com/google/uuid"
)

// ConnectionUpdate is the builder for updating Connection entities.
type ConnectionUpdate struct {
	config
	hooks    []Hook
	mutation *ConnectionMutation
}

// Where appends a list predicates to the ConnectionUpdate builder.
func (cu *ConnectionUpdate) Where(ps ...predicate.Connection) *ConnectionUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetWorkspaceID sets the "workspace_id" field.
func (cu *ConnectionUpdate) SetWorkspaceID(u uuid.UUID) *ConnectionUpdate {
	cu.mutation.SetWorkspaceID(u)
	return cu
}

// SetNillableWorkspaceID sets the "workspace_id" field if the given value is not nil.
func (cu *ConnectionUpdate) SetNillableWorkspaceID(u *uuid.UUID) *ConnectionUpdate {
	if u != nil {
		cu.SetWorkspaceID(*u)
	}
	return cu
}

// SetName sets the "name" field.
func (cu *ConnectionUpdate) SetName(s string) *ConnectionUpdate {
	cu.mutation.SetName(s)
	return cu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cu *ConnectionUpdate) SetNillableName(s *string) *ConnectionUpdate {
	if s != nil {
		cu.SetName(*s)
	}
	return cu
}

// SetImageURL sets the "image_url" field.
func (cu *ConnectionUpdate) SetImageURL(s string) *ConnectionUpdate {
	cu.mutation.SetImageURL(s)
	return cu
}

// SetNillableImageURL sets the "image_url" field if the given value is not nil.
func (cu *ConnectionUpdate) SetNillableImageURL(s *string) *ConnectionUpdate {
	if s != nil {
		cu.SetImageURL(*s)
	}
	return cu
}

// ClearImageURL clears the value of the "image_url" field.
func (cu *ConnectionUpdate) ClearImageURL() *ConnectionUpdate {
	cu.mutation.ClearImageURL()
	return cu
}

// SetWorkspace sets the "workspace" edge to the Workspace entity.
func (cu *ConnectionUpdate) SetWorkspace(w *Workspace) *ConnectionUpdate {
	return cu.SetWorkspaceID(w.ID)
}

// AddNoteIDs adds the "notes" edge to the Note entity by IDs.
func (cu *ConnectionUpdate) AddNoteIDs(ids ...int) *ConnectionUpdate {
	cu.mutation.AddNoteIDs(ids...)
	return cu
}

// AddNotes adds the "notes" edges to the Note entity.
func (cu *ConnectionUpdate) AddNotes(n ...*Note) *ConnectionUpdate {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return cu.AddNoteIDs(ids...)
}

// AddTagIDs adds the "tags" edge to the Tag entity by IDs.
func (cu *ConnectionUpdate) AddTagIDs(ids ...int) *ConnectionUpdate {
	cu.mutation.AddTagIDs(ids...)
	return cu
}

// AddTags adds the "tags" edges to the Tag entity.
func (cu *ConnectionUpdate) AddTags(t ...*Tag) *ConnectionUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return cu.AddTagIDs(ids...)
}

// Mutation returns the ConnectionMutation object of the builder.
func (cu *ConnectionUpdate) Mutation() *ConnectionMutation {
	return cu.mutation
}

// ClearWorkspace clears the "workspace" edge to the Workspace entity.
func (cu *ConnectionUpdate) ClearWorkspace() *ConnectionUpdate {
	cu.mutation.ClearWorkspace()
	return cu
}

// ClearNotes clears all "notes" edges to the Note entity.
func (cu *ConnectionUpdate) ClearNotes() *ConnectionUpdate {
	cu.mutation.ClearNotes()
	return cu
}

// RemoveNoteIDs removes the "notes" edge to Note entities by IDs.
func (cu *ConnectionUpdate) RemoveNoteIDs(ids ...int) *ConnectionUpdate {
	cu.mutation.RemoveNoteIDs(ids...)
	return cu
}

// RemoveNotes removes "notes" edges to Note entities.
func (cu *ConnectionUpdate) RemoveNotes(n ...*Note) *ConnectionUpdate {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return cu.RemoveNoteIDs(ids...)
}

// ClearTags clears all "tags" edges to the Tag entity.
func (cu *ConnectionUpdate) ClearTags() *ConnectionUpdate {
	cu.mutation.ClearTags()
	return cu
}

// RemoveTagIDs removes the "tags" edge to Tag entities by IDs.
func (cu *ConnectionUpdate) RemoveTagIDs(ids ...int) *ConnectionUpdate {
	cu.mutation.RemoveTagIDs(ids...)
	return cu
}

// RemoveTags removes "tags" edges to Tag entities.
func (cu *ConnectionUpdate) RemoveTags(t ...*Tag) *ConnectionUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return cu.RemoveTagIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *ConnectionUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *ConnectionUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *ConnectionUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *ConnectionUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cu *ConnectionUpdate) check() error {
	if v, ok := cu.mutation.Name(); ok {
		if err := connection.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Connection.name": %w`, err)}
		}
	}
	if cu.mutation.WorkspaceCleared() && len(cu.mutation.WorkspaceIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Connection.workspace"`)
	}
	return nil
}

func (cu *ConnectionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(connection.Table, connection.Columns, sqlgraph.NewFieldSpec(connection.FieldID, field.TypeUUID))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.Name(); ok {
		_spec.SetField(connection.FieldName, field.TypeString, value)
	}
	if value, ok := cu.mutation.ImageURL(); ok {
		_spec.SetField(connection.FieldImageURL, field.TypeString, value)
	}
	if cu.mutation.ImageURLCleared() {
		_spec.ClearField(connection.FieldImageURL, field.TypeString)
	}
	if cu.mutation.WorkspaceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   connection.WorkspaceTable,
			Columns: []string{connection.WorkspaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workspace.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.WorkspaceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   connection.WorkspaceTable,
			Columns: []string{connection.WorkspaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workspace.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.NotesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   connection.NotesTable,
			Columns: []string{connection.NotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(note.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedNotesIDs(); len(nodes) > 0 && !cu.mutation.NotesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   connection.NotesTable,
			Columns: []string{connection.NotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(note.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.NotesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   connection.NotesTable,
			Columns: []string{connection.NotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(note.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   connection.TagsTable,
			Columns: []string{connection.TagsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedTagsIDs(); len(nodes) > 0 && !cu.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   connection.TagsTable,
			Columns: []string{connection.TagsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.TagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   connection.TagsTable,
			Columns: []string{connection.TagsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{connection.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// ConnectionUpdateOne is the builder for updating a single Connection entity.
type ConnectionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ConnectionMutation
}

// SetWorkspaceID sets the "workspace_id" field.
func (cuo *ConnectionUpdateOne) SetWorkspaceID(u uuid.UUID) *ConnectionUpdateOne {
	cuo.mutation.SetWorkspaceID(u)
	return cuo
}

// SetNillableWorkspaceID sets the "workspace_id" field if the given value is not nil.
func (cuo *ConnectionUpdateOne) SetNillableWorkspaceID(u *uuid.UUID) *ConnectionUpdateOne {
	if u != nil {
		cuo.SetWorkspaceID(*u)
	}
	return cuo
}

// SetName sets the "name" field.
func (cuo *ConnectionUpdateOne) SetName(s string) *ConnectionUpdateOne {
	cuo.mutation.SetName(s)
	return cuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cuo *ConnectionUpdateOne) SetNillableName(s *string) *ConnectionUpdateOne {
	if s != nil {
		cuo.SetName(*s)
	}
	return cuo
}

// SetImageURL sets the "image_url" field.
func (cuo *ConnectionUpdateOne) SetImageURL(s string) *ConnectionUpdateOne {
	cuo.mutation.SetImageURL(s)
	return cuo
}

// SetNillableImageURL sets the "image_url" field if the given value is not nil.
func (cuo *ConnectionUpdateOne) SetNillableImageURL(s *string) *ConnectionUpdateOne {
	if s != nil {
		cuo.SetImageURL(*s)
	}
	return cuo
}

// ClearImageURL clears the value of the "image_url" field.
func (cuo *ConnectionUpdateOne) ClearImageURL() *ConnectionUpdateOne {
	cuo.mutation.ClearImageURL()
	return cuo
}

// SetWorkspace sets the "workspace" edge to the Workspace entity.
func (cuo *ConnectionUpdateOne) SetWorkspace(w *Workspace) *ConnectionUpdateOne {
	return cuo.SetWorkspaceID(w.ID)
}

// AddNoteIDs adds the "notes" edge to the Note entity by IDs.
func (cuo *ConnectionUpdateOne) AddNoteIDs(ids ...int) *ConnectionUpdateOne {
	cuo.mutation.AddNoteIDs(ids...)
	return cuo
}

// AddNotes adds the "notes" edges to the Note entity.
func (cuo *ConnectionUpdateOne) AddNotes(n ...*Note) *ConnectionUpdateOne {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return cuo.AddNoteIDs(ids...)
}

// AddTagIDs adds the "tags" edge to the Tag entity by IDs.
func (cuo *ConnectionUpdateOne) AddTagIDs(ids ...int) *ConnectionUpdateOne {
	cuo.mutation.AddTagIDs(ids...)
	return cuo
}

// AddTags adds the "tags" edges to the Tag entity.
func (cuo *ConnectionUpdateOne) AddTags(t ...*Tag) *ConnectionUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return cuo.AddTagIDs(ids...)
}

// Mutation returns the ConnectionMutation object of the builder.
func (cuo *ConnectionUpdateOne) Mutation() *ConnectionMutation {
	return cuo.mutation
}

// ClearWorkspace clears the "workspace" edge to the Workspace entity.
func (cuo *ConnectionUpdateOne) ClearWorkspace() *ConnectionUpdateOne {
	cuo.mutation.ClearWorkspace()
	return cuo
}

// ClearNotes clears all "notes" edges to the Note entity.
func (cuo *ConnectionUpdateOne) ClearNotes() *ConnectionUpdateOne {
	cuo.mutation.ClearNotes()
	return cuo
}

// RemoveNoteIDs removes the "notes" edge to Note entities by IDs.
func (cuo *ConnectionUpdateOne) RemoveNoteIDs(ids ...int) *ConnectionUpdateOne {
	cuo.mutation.RemoveNoteIDs(ids...)
	return cuo
}

// RemoveNotes removes "notes" edges to Note entities.
func (cuo *ConnectionUpdateOne) RemoveNotes(n ...*Note) *ConnectionUpdateOne {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return cuo.RemoveNoteIDs(ids...)
}

// ClearTags clears all "tags" edges to the Tag entity.
func (cuo *ConnectionUpdateOne) ClearTags() *ConnectionUpdateOne {
	cuo.mutation.ClearTags()
	return cuo
}

// RemoveTagIDs removes the "tags" edge to Tag entities by IDs.
func (cuo *ConnectionUpdateOne) RemoveTagIDs(ids ...int) *ConnectionUpdateOne {
	cuo.mutation.RemoveTagIDs(ids...)
	return cuo
}

// RemoveTags removes "tags" edges to Tag entities.
func (cuo *ConnectionUpdateOne) RemoveTags(t ...*Tag) *ConnectionUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return cuo.RemoveTagIDs(ids...)
}

// Where appends a list predicates to the ConnectionUpdate builder.
func (cuo *ConnectionUpdateOne) Where(ps ...predicate.Connection) *ConnectionUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *ConnectionUpdateOne) Select(field string, fields ...string) *ConnectionUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Connection entity.
func (cuo *ConnectionUpdateOne) Save(ctx context.Context) (*Connection, error) {
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *ConnectionUpdateOne) SaveX(ctx context.Context) *Connection {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *ConnectionUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *ConnectionUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuo *ConnectionUpdateOne) check() error {
	if v, ok := cuo.mutation.Name(); ok {
		if err := connection.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Connection.name": %w`, err)}
		}
	}
	if cuo.mutation.WorkspaceCleared() && len(cuo.mutation.WorkspaceIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Connection.workspace"`)
	}
	return nil
}

func (cuo *ConnectionUpdateOne) sqlSave(ctx context.Context) (_node *Connection, err error) {
	if err := cuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(connection.Table, connection.Columns, sqlgraph.NewFieldSpec(connection.FieldID, field.TypeUUID))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Connection.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, connection.FieldID)
		for _, f := range fields {
			if !connection.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != connection.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.Name(); ok {
		_spec.SetField(connection.FieldName, field.TypeString, value)
	}
	if value, ok := cuo.mutation.ImageURL(); ok {
		_spec.SetField(connection.FieldImageURL, field.TypeString, value)
	}
	if cuo.mutation.ImageURLCleared() {
		_spec.ClearField(connection.FieldImageURL, field.TypeString)
	}
	if cuo.mutation.WorkspaceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   connection.WorkspaceTable,
			Columns: []string{connection.WorkspaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workspace.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.WorkspaceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   connection.WorkspaceTable,
			Columns: []string{connection.WorkspaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workspace.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.NotesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   connection.NotesTable,
			Columns: []string{connection.NotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(note.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedNotesIDs(); len(nodes) > 0 && !cuo.mutation.NotesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   connection.NotesTable,
			Columns: []string{connection.NotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(note.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.NotesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   connection.NotesTable,
			Columns: []string{connection.NotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(note.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   connection.TagsTable,
			Columns: []string{connection.TagsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedTagsIDs(); len(nodes) > 0 && !cuo.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   connection.TagsTable,
			Columns: []string{connection.TagsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.TagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   connection.TagsTable,
			Columns: []string{connection.TagsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Connection{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{connection.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
