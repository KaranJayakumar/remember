// Code generated by ent, DO NOT EDIT.

package connection

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the connection type in the database.
	Label = "connection"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldParentUserId holds the string denoting the parentuserid field in the database.
	FieldParentUserId = "parent_user_id"
	// EdgeMemories holds the string denoting the memories edge name in mutations.
	EdgeMemories = "memories"
	// Table holds the table name of the connection in the database.
	Table = "connections"
	// MemoriesTable is the table that holds the memories relation/edge.
	MemoriesTable = "memories"
	// MemoriesInverseTable is the table name for the Memory entity.
	// It exists in this package in order to avoid circular dependency with the "memory" package.
	MemoriesInverseTable = "memories"
	// MemoriesColumn is the table column denoting the memories relation/edge.
	MemoriesColumn = "connection_memories"
)

// Columns holds all SQL columns for connection fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldParentUserId,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Connection queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByParentUserId orders the results by the parentUserId field.
func ByParentUserId(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldParentUserId, opts...).ToFunc()
}

// ByMemoriesCount orders the results by memories count.
func ByMemoriesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newMemoriesStep(), opts...)
	}
}

// ByMemories orders the results by memories terms.
func ByMemories(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMemoriesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newMemoriesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MemoriesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, MemoriesTable, MemoriesColumn),
	)
}
