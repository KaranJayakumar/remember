// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/KaranJayakumar/remember/ent/connection"
	"github.com/KaranJayakumar/remember/ent/memory"
	"github.com/KaranJayakumar/remember/ent/predicate"
)

// MemoryUpdate is the builder for updating Memory entities.
type MemoryUpdate struct {
	config
	hooks    []Hook
	mutation *MemoryMutation
}

// Where appends a list predicates to the MemoryUpdate builder.
func (mu *MemoryUpdate) Where(ps ...predicate.Memory) *MemoryUpdate {
	mu.mutation.Where(ps...)
	return mu
}

// SetContent sets the "content" field.
func (mu *MemoryUpdate) SetContent(s string) *MemoryUpdate {
	mu.mutation.SetContent(s)
	return mu
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (mu *MemoryUpdate) SetNillableContent(s *string) *MemoryUpdate {
	if s != nil {
		mu.SetContent(*s)
	}
	return mu
}

// SetConnectionID sets the "connection" edge to the Connection entity by ID.
func (mu *MemoryUpdate) SetConnectionID(id int) *MemoryUpdate {
	mu.mutation.SetConnectionID(id)
	return mu
}

// SetConnection sets the "connection" edge to the Connection entity.
func (mu *MemoryUpdate) SetConnection(c *Connection) *MemoryUpdate {
	return mu.SetConnectionID(c.ID)
}

// Mutation returns the MemoryMutation object of the builder.
func (mu *MemoryUpdate) Mutation() *MemoryMutation {
	return mu.mutation
}

// ClearConnection clears the "connection" edge to the Connection entity.
func (mu *MemoryUpdate) ClearConnection() *MemoryUpdate {
	mu.mutation.ClearConnection()
	return mu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mu *MemoryUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, mu.sqlSave, mu.mutation, mu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mu *MemoryUpdate) SaveX(ctx context.Context) int {
	affected, err := mu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mu *MemoryUpdate) Exec(ctx context.Context) error {
	_, err := mu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mu *MemoryUpdate) ExecX(ctx context.Context) {
	if err := mu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mu *MemoryUpdate) check() error {
	if mu.mutation.ConnectionCleared() && len(mu.mutation.ConnectionIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Memory.connection"`)
	}
	return nil
}

func (mu *MemoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := mu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(memory.Table, memory.Columns, sqlgraph.NewFieldSpec(memory.FieldID, field.TypeInt))
	if ps := mu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mu.mutation.Content(); ok {
		_spec.SetField(memory.FieldContent, field.TypeString, value)
	}
	if mu.mutation.ConnectionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   memory.ConnectionTable,
			Columns: []string{memory.ConnectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(connection.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.ConnectionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   memory.ConnectionTable,
			Columns: []string{memory.ConnectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(connection.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{memory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mu.mutation.done = true
	return n, nil
}

// MemoryUpdateOne is the builder for updating a single Memory entity.
type MemoryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MemoryMutation
}

// SetContent sets the "content" field.
func (muo *MemoryUpdateOne) SetContent(s string) *MemoryUpdateOne {
	muo.mutation.SetContent(s)
	return muo
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (muo *MemoryUpdateOne) SetNillableContent(s *string) *MemoryUpdateOne {
	if s != nil {
		muo.SetContent(*s)
	}
	return muo
}

// SetConnectionID sets the "connection" edge to the Connection entity by ID.
func (muo *MemoryUpdateOne) SetConnectionID(id int) *MemoryUpdateOne {
	muo.mutation.SetConnectionID(id)
	return muo
}

// SetConnection sets the "connection" edge to the Connection entity.
func (muo *MemoryUpdateOne) SetConnection(c *Connection) *MemoryUpdateOne {
	return muo.SetConnectionID(c.ID)
}

// Mutation returns the MemoryMutation object of the builder.
func (muo *MemoryUpdateOne) Mutation() *MemoryMutation {
	return muo.mutation
}

// ClearConnection clears the "connection" edge to the Connection entity.
func (muo *MemoryUpdateOne) ClearConnection() *MemoryUpdateOne {
	muo.mutation.ClearConnection()
	return muo
}

// Where appends a list predicates to the MemoryUpdate builder.
func (muo *MemoryUpdateOne) Where(ps ...predicate.Memory) *MemoryUpdateOne {
	muo.mutation.Where(ps...)
	return muo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (muo *MemoryUpdateOne) Select(field string, fields ...string) *MemoryUpdateOne {
	muo.fields = append([]string{field}, fields...)
	return muo
}

// Save executes the query and returns the updated Memory entity.
func (muo *MemoryUpdateOne) Save(ctx context.Context) (*Memory, error) {
	return withHooks(ctx, muo.sqlSave, muo.mutation, muo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (muo *MemoryUpdateOne) SaveX(ctx context.Context) *Memory {
	node, err := muo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (muo *MemoryUpdateOne) Exec(ctx context.Context) error {
	_, err := muo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (muo *MemoryUpdateOne) ExecX(ctx context.Context) {
	if err := muo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (muo *MemoryUpdateOne) check() error {
	if muo.mutation.ConnectionCleared() && len(muo.mutation.ConnectionIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Memory.connection"`)
	}
	return nil
}

func (muo *MemoryUpdateOne) sqlSave(ctx context.Context) (_node *Memory, err error) {
	if err := muo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(memory.Table, memory.Columns, sqlgraph.NewFieldSpec(memory.FieldID, field.TypeInt))
	id, ok := muo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Memory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := muo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, memory.FieldID)
		for _, f := range fields {
			if !memory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != memory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := muo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := muo.mutation.Content(); ok {
		_spec.SetField(memory.FieldContent, field.TypeString, value)
	}
	if muo.mutation.ConnectionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   memory.ConnectionTable,
			Columns: []string{memory.ConnectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(connection.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.ConnectionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   memory.ConnectionTable,
			Columns: []string{memory.ConnectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(connection.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Memory{config: muo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, muo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{memory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	muo.mutation.done = true
	return _node, nil
}
